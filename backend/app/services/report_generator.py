import os
import json
import openai
from fpdf import FPDF
from fpdf.enums import XPos, YPos
from app.core.config import settings
from app.models.plan import Plan

# Configure OpenAI
openai.api_key = settings.OPENAI_API_KEY

async def generate_report_json(idea: str, plan: Plan) -> dict:
    """Generate report content using OpenAI API with plan-specific prompt"""
    
    user_prompt = f"""
Idea: ```{idea}```

Generate the report JSON as specified above. Ensure every section follows the requirements for {plan.report_type} ({plan.report_pages}).
"""
    
    try:
        resp = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": plan.prompt_template},
                {"role": "user", "content": user_prompt},
            ],
            response_format={"type": "json_object"},
        )
        
        if (data := resp.choices[0].message.content) is None:
            raise ValueError("Received empty response from OpenAI API")
        return json.loads(data)

    except Exception as e:
        print(f"Error generating report: {e}")
        # Return a default structure based on plan type
        if plan.name == "Basic":
            return {
                "executive_summary": "Report generation failed.",
                "problem_opportunity": "N/A",
                "technology_overview": "N/A",
                "key_benefits": "N/A",
                "applications": "N/A",
                "ip_snapshot": "N/A",
                "next_steps": "N/A",
            }
        elif plan.name == "Intermediate":
            return {
                "executive_summary": "Report generation failed.",
                "problem_solution": "N/A",
                "technical_feasibility": "N/A",
                "ip_summary": "N/A",
                "market_signals": "N/A",
                "early_competitors": "N/A",
                "regulatory_compliance": "N/A",
                "summary_recommendation": "N/A",
            }
        elif plan.name == "Advanced":
            return {
                "executive_summary": "Report generation failed.",
                "technology_description": "N/A",
                "market_competition": "N/A",
                "trl_feasibility": "N/A",
                "ip_legal_status": "N/A",
                "regulatory_path": "N/A",
                "commercialization_options": "N/A",
                "preliminary_financials": "N/A",
                "conclusion_recommendations": "N/A",
            }
        else:  # Comprehensive
            return {
                "executive_summary": "Report generation failed.",
                "invention_claims": "N/A",
                "global_fto": "N/A",
                "market_analysis": "N/A",
                "business_models": "N/A",
                "roi_financial_projections": "N/A",
                "funding_strategy": "N/A",
                "licensing_plan": "N/A",
                "team_partnerships": "N/A",
                "implementation_roadmap": "N/A",
                "risk_analysis": "N/A",
                "appendices_data": "N/A",
            }

class ReportPDF(FPDF):
    def __init__(self, plan_name: str):
        super().__init__(format="A4")
        self.set_auto_page_break(auto=True, margin=20)
        self.set_margins(20, 20, 20)
        self.plan_name = plan_name

    def header(self):
        self.set_font("Helvetica", "B", 10)
        self.set_text_color(128, 128, 128)
        self.cell(
            0,
            10,
            f"Technology Assessment Report - {self.plan_name} Plan",
            new_x=XPos.LMARGIN,
            new_y=YPos.NEXT,
            align="C",
        )
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 8)
        self.set_text_color(128, 128, 128)
        self.cell(
            0,
            10,
            f"Page {self.page_no()} - Generated by Asasy",
            new_x=XPos.LMARGIN,
            new_y=YPos.TOP,
            align="C",
        )

    def add_title(self, title):
        self.set_font("Helvetica", "B", 18)
        self.set_text_color(0, 0, 0)
        title = self.clean_text(title)
        self.cell(0, 15, title, new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")
        self.ln(10)

    def add_section_header(self, section_num, title):
        if self.get_y() > 50:
            self.ln(8)

        self.set_font("Helvetica", "B", 14)
        self.set_text_color(0, 0, 0)
        title = self.clean_text(title)
        self.cell(
            0,
            10,
            f"{section_num}. {title}",
            new_x=XPos.LMARGIN,
            new_y=YPos.NEXT,
            align="L",
        )
        self.ln(3)

    def add_paragraph(self, text):
        self.set_font("Helvetica", "", 11)
        self.set_text_color(0, 0, 0)

        text = str(text).strip()
        if not text or text == "N/A":
            text = "Information not available."

        text = self.clean_text(text)
        self.multi_cell(0, 6, text, align="L")
        self.ln(2)

    def clean_text(self, text):
        """Clean text to remove problematic Unicode characters"""
        if not text:
            return ""

        replacements = {
            """: "'",
            """: "'",
            '"': '"',
            '"': '"',
            "–": "-",
            "—": "-",
            "…": "...",
            "®": "(R)",
            "™": "(TM)",
            "©": "(C)",
        }

        for old, new in replacements.items():
            text = text.replace(old, new)

        text = "".join(char if ord(char) < 128 else "?" for char in text)
        return text

def create_pdf(report: dict, output_path: str, plan: Plan):
    """Create PDF from report data based on plan type"""
    try:
        pdf = ReportPDF(plan.name)
        pdf.add_page()

        # Title
        pdf.add_title(f"TECHNOLOGY ASSESSMENT REPORT")
        
        # Subtitle with plan info
        pdf.set_font("Helvetica", "B", 12)
        pdf.set_text_color(0, 0, 0)
        subtitle = f"{plan.report_type} ({plan.report_pages})"
        subtitle = pdf.clean_text(subtitle)
        pdf.multi_cell(0, 8, subtitle, align="C")
        pdf.ln(10)

        # Sections based on plan type
        if plan.name == "Basic":
            sections = [
                ("Executive Summary", report.get("executive_summary", "")),
                ("Problem & Opportunity", report.get("problem_opportunity", "")),
                ("Technology Overview", report.get("technology_overview", "")),
                ("Key Benefits", report.get("key_benefits", "")),
                ("Applications", report.get("applications", "")),
                ("IP Snapshot", report.get("ip_snapshot", "")),
                ("Next Steps", report.get("next_steps", "")),
            ]
        elif plan.name == "Intermediate":
            sections = [
                ("Executive Summary", report.get("executive_summary", "")),
                ("Problem & Solution", report.get("problem_solution", "")),
                ("Technical Feasibility", report.get("technical_feasibility", "")),
                ("IP Summary", report.get("ip_summary", "")),
                ("Market Signals", report.get("market_signals", "")),
                ("Early Competitors", report.get("early_competitors", "")),
                ("Regulatory & Compliance", report.get("regulatory_compliance", "")),
                ("Summary & Recommendation", report.get("summary_recommendation", "")),
            ]
        elif plan.name == "Advanced":
            sections = [
                ("Executive Summary", report.get("executive_summary", "")),
                ("Technology Description", report.get("technology_description", "")),
                ("Market & Competition", report.get("market_competition", "")),
                ("TRL & Feasibility", report.get("trl_feasibility", "")),
                ("IP & Legal Status", report.get("ip_legal_status", "")),
                ("Regulatory Path", report.get("regulatory_path", "")),
                ("Commercialization Options", report.get("commercialization_options", "")),
                ("Preliminary Financials", report.get("preliminary_financials", "")),
                ("Conclusion & Recommendations", report.get("conclusion_recommendations", "")),
            ]
        else:  # Comprehensive
            sections = [
                ("Executive Summary", report.get("executive_summary", "")),
                ("Invention & Claims", report.get("invention_claims", "")),
                ("Global FTO Analysis", report.get("global_fto", "")),
                ("Market Analysis", report.get("market_analysis", "")),
                ("Business Models", report.get("business_models", "")),
                ("ROI & Financial Projections", report.get("roi_financial_projections", "")),
                ("Funding Strategy", report.get("funding_strategy", "")),
                ("Licensing Plan", report.get("licensing_plan", "")),
                ("Team & Partnerships", report.get("team_partnerships", "")),
                ("Implementation Roadmap", report.get("implementation_roadmap", "")),
                ("Risk Analysis", report.get("risk_analysis", "")),
                ("Appendices & Data", report.get("appendices_data", "")),
            ]

        for i, (title, content) in enumerate(sections, 1):
            pdf.add_section_header(i, title)
            pdf.add_paragraph(content)

        # Save PDF
        pdf.output(output_path)
        print(f"✅ PDF generated successfully at: {output_path}")

    except Exception as e:
        print(f"❌ Error creating PDF: {e}")
        raise

async def generate_technology_report(idea: str, output_path: str, plan: Plan) -> dict:
    """Main function to generate a complete technology assessment report"""
    try:
        print(f"🔄 Generating {plan.name} report content...")
        report_json = await generate_report_json(idea, plan)

        print("🔄 Creating PDF...")
        create_pdf(report_json, output_path, plan)

        print("✅ Process completed successfully!")
        return report_json

    except Exception as e:
        print(f"❌ Error in main process: {e}")
        raise